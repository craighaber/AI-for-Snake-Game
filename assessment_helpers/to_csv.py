#**************************************************************************************
#to_csv.py
#Author: Dave Carroll
#10/14/2021
#This script formats the GA data .txt file (created by trainGeneticAlgorithm.py) as a .csv file
#*************************************************************************************
#Run this script using "python to_csv.py" in the command line.
#
#Optionally specify the path of the GA data .txt file to format using the "--ga_data_filename"
#command line argument. The default is "../GAdata.txt" which is the .txt file
#automatically generated by "trainGeneticAlgorithm.py".
#
#Optionally specify the path of a .csv file to save the formated data using "--output_filename"
#command line argument. The default is "ga_data.csv".
#
#Note: if "ga_data.csv" already exists in this directory it will be overwritten

import csv
import argparse
import os

def create_csv_row(ga_data, line):
    """Parse GA data and create one formatted row to be written to the .csv file"""

    row = []
            
    split = line.split(" ")
    row.append(split[1].strip())
    
    line = ga_data.readline() # skip binary line
    
    line = ga_data.readline()
    split = line.split(" ")
    row.append(split[2].strip()) 
    
    line = ga_data.readline()
    split = line.split(" ")
    row.append(split[2].strip())
    
    line = ga_data.readline()
    split = line.split(" ")
    row.append(split[3].strip())
    
    return ga_data, line, row

def check_output_file_extension(output_filename):
    """Make sure the ouptut file is a .csv file"""
    output_ext = os.path.splitext(args.output_filename)[1]

    if(output_ext != ".csv"):
        raise Exception("output file must be a .csv")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--ga_data_filename", nargs='?', type=str, default="../GAdata.txt")
    parser.add_argument("--output_filename", nargs='?', type=str, default="ga_data.csv")
    args = parser.parse_args()

    check_output_file_extension(args.output_filename)

    ga_data = open(args.ga_data_filename, "r")
    csv_ga_data = open(args.output_filename, "w")

    csv_writer = csv.writer(csv_ga_data)
    csv_writer.writerow(["Generation", "Best Fitness", "Average Fitness", "Average Score"]) # write column headers

    line = ga_data.readline()

    while(line):
        if("Generation" in line):
            ga_data, line, row = create_csv_row(ga_data, line)
            
            csv_writer.writerow(row)
        line = ga_data.readline() # iterate

    ga_data.close()
    csv_ga_data.close()
